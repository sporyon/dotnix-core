# polkadot-validator-selinux tests
#
# This test checks whether SELinux confinement works.
#

{ inputs, system }:

inputs.nixpkgs.lib.nixos.runTest {
  name = "polkadot-validator-selinux-checks";

  hostPkgs = inputs.nixpkgs.legacyPackages.${system};

  nodes.alice = { config, pkgs, ... }: {
    imports = [
      inputs.self.nixosModules.polkadot-validator
      inputs.self.nixosModules.selinux
    ];

    # Validator configuration.
    dotnix.polkadot-validator.enable = true;
    dotnix.polkadot-validator.name = "alice";
    dotnix.polkadot-validator.chain = "westend";
    dotnix.polkadot-validator.extraArgs = [
      "--db-storage-threshold=0"
    ];

    # Helper utilities to be used in testScript.
    environment.systemPackages = [
      config.dotnix.polkadot-validator.package
      pkgs.libselinux
      pkgs.polkadot-rpc
      pkgs.selinux.coreutils
    ];

    nixpkgs.overlays = [
      inputs.self.overlays.default
    ];

    security.selinux.enable = true;

    system.stateVersion = "24.11";
  };

  testScript = ''
    start_all()
    alice.wait_until_succeeds("systemctl is-active multi-user.target")

    # The test systems starts with permissive SELinux mode.
    # The initial context is system_u:system_r:init_t (i.e. same as systemd),
    # this means that runcon can and has to be used to test other contexts.

    # Prepare some secrets to test the permissions of the root user.
    # This assumes secrets are stored in /var/secrets, which is the default case.
    alice.succeed("runcon root:sysadm_r:sysadm_systemd_t touch /var/secrets/testsecret1")

    # Show that in permissive mode, root can read root secrets
    alice.succeed("runcon root:sysadm_r:sysadm_systemd_t cat /var/secrets/testsecret1")

    # Turn on enforcing.
    # From here on, all tests run with SELinux rulse enforced.
    alice.succeed("setenforce 1")

    # Ensure root can (still) write secrets.
    alice.succeed("runcon root:sysadm_r:sysadm_systemd_t touch /var/secrets/testsecret2")

    # Set some generated node keys to start the validator.
    alice.succeed("polkadot key generate-node-key | runcon root:sysadm_r:sysadm_systemd_t polkadot-validator --set-node-key")

    # Ensure the node key exists now and root cannot read it.
    alice.succeed("test -e /var/secrets/polkadot-validator.node_key")
    alice.fail("runcon root:sysadm_r:sysadm_systemd_t cat /var/secrets/polkadot-validator.node_key")

    # Ensure root can neither read nor write polkadot-validator's state.
    #
    # This effectlively protects all state and secrets generated by the validator from being accessed by root.
    alice.wait_until_succeeds("ls /var/lib/private/polkadot-validator/chains/westend2/db/full | grep IDENTITY")
    alice.fail("runcon root:sysadm_r:sysadm_systemd_t ls /var/lib/private/polkadot-validator/chains/westend2/db/full/IDENTITY")
    alice.fail("runcon root:sysadm_r:sysadm_systemd_t cat /var/lib/private/polkadot-validator/chains/westend2/db/full/IDENTITY")
  '';
}
